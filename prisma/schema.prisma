generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             String           @id @unique @default(nanoid())
  email          String           @unique
  firstName      String
  lastName       String
  birthday       DateTime
  role           String
  companyName    String
  companyLocation String @default("Улаанбаатар")
  phoneNumber    String           @unique
  password       String
  salary         Int              @default(10000)
  salaryType     String           @default("HOUR")
  pfp            String
  about          String?
  profileViews   Int              @default(0)
  featuredSkills featuredSkills[]
  reviewee       review[]         @relation("reviewee_")
  reviewer       review[]         @relation("reviewer_")
  skill          skill[]          @relation("skillTouser")
  jobpost job[]
  reportedUsers reportUser[] @relation("reportedUser")
  reporterUser      reportUser[] @relation("reporter")
  freelancerJobApplication jobApplication[] @relation("freelancerJobApplication")
  clientJobApplication jobApplication[] @relation("clientJobApplication")
  createdAt DateTime @default(now())
}


model otp {
  id    String @id @default(nanoid())
  otp   Int    @unique
  email String
  createdAt DateTime @default(now())
}


model skill {
  id             String           @id @default(nanoid())
  name           String           @unique
  featuredSkills featuredSkills[]
  job            job[]  
  createdAt DateTime @default(now())
  user           user[]           @relation("skillTouser")
}


model featuredSkills {
  id        String    @id @default(nanoid())
  userId    String
  skillId   String
  detail    String
  endedAt   DateTime?
  present   Boolean   @default(false)
  startedAt DateTime
  createdAt DateTime @default(now())
  skill     skill     @relation(fields: [skillId], references: [id])
  user      user      @relation(fields: [userId], references: [id])
}


model review {
  id         String @id @default(nanoid())
  rating     Int
  reviewerId String
  revieweeId String
  message    String
  createdAt DateTime @default(now())
  reviewee   user   @relation("reviewee_", fields: [revieweeId], references: [id])
  reviewer   user   @relation("reviewer_", fields: [reviewerId], references: [id])
}


model job {
  id          String   @id @default(nanoid())
  title       String
  description String
  status JobStatus @default(ACTIVE)
  experienced Boolean
  jobLocation String @default("Улаанбаатар")
  jobPostView Int @default(0)
  salary      Int
  salaryRate  SalaryType
  postedAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  poster user @relation(references: [id], fields: [posterId])
  posterId String
  skill       skill[]
  jobApplication jobApplication[]
}


model jobApplication {
  id String @id @default(nanoid())
  job job @relation(fields: [jobId], references: [id])
  jobId String
  accepted jobApplicationStatus @default(waiting)
  freelancer user @relation("freelancerJobApplication",fields: [freelancerId], references: [id]) 
  freelancerId String
  client user @relation("clientJobApplication",fields: [clientId], references: [id]) 
  clientId String
  createdAt DateTime @default(now())
}

model reportUser {
  id String @id @default(nanoid())
  reason String?
  reportedUser user @relation("reportedUser",fields: [reportedUserId], references: [id]) //person beinge reported
  reportedUserId String
  reporterUser user @relation("reporter",fields: [reporterUserId], references: [id]) //person who reported
  reporterUserId String
}
enum jobApplicationStatus {
accepted
denied
waiting
}
enum SalaryType {
  MONTH
  HOUR
  DAY
}
enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}
